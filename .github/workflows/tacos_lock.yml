name: TACOS Lock

# downstream projects should use events:
###pull_request:
###  types: [opened, synchronize, reopened]

on:
  workflow_call:
    inputs:
      tacos_gha_repo:
        type: string
        default: getsentry/tacos-gha
      tacos_gha_ref:
        type: string
        default: refs/heads/stable

defaults:
  run:
    shell: env ./tacos-gha/lib/ci/default-shell {0}

# Cancel in progress workflows on pull_requests.
# https://docs.github.com/en/actions/using-jobs/using-concurrency#example-using-a-fallback-value
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  GETSENTRY_SAC_VERB: apply

jobs:
  determine-tf-root-modules:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    name: "Determine TF slices to lock"
    if: github.event.pull_request.draft == false
    outputs:
      slices: ${{ steps.slices.outputs.slices }}

    steps:
      - uses: bukzor/direnv-install@v1
      - uses: actions/checkout@v4
      - uses: actions/checkout@v4
        with:
          repository: ${{inputs.tacos_gha_repo}}
          ref: ${{inputs.tacos_gha_ref}}
          path: tacos-gha

      - id: files
        uses: getsentry/paths-filter@v2.11.1
        with:
          filters: "all: ['**']"
          list-files: json

      # see ./.python-version
      - run: |
          gha-set-env 'PYTHON_VERSION' grep -v '^#' tacos-gha/.python-version
      - uses: actions/setup-python@v5
        with:
          python-version: ${{env.PYTHON_VERSION}}

      - name: show env
        run: |
          sort -z /proc/self/environ |
            tr '\0\n' '\n;' |
            tee orig.env

      - id: slices
        run: |
          ( echo -n slices=
            "$TACOS_GHA_HOME/"lib/ci/dependent-slices <<'EOF'
          ${{steps.files.outputs.all_files}}
          EOF
          ) | tee -a "$GITHUB_OUTPUT"

  tacos_lock:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      id-token: write

    # note: we want to noop if they converted to draft first
    needs: [determine-tf-root-modules]
    if: |
      true
      && github.event.pull_request.draft == false
      && needs.determine-tf-root-modules.outputs.slices != '[]'
    strategy:
      fail-fast: false
      matrix:
        tf-root-module:
          ${{ fromJSON(needs.determine-tf-root-modules.outputs.slices) }}

    env:
      TF_ROOT_MODULE: ${{matrix.tf-root-module}}

    steps:
      - uses: bukzor/direnv-install@v1
      - uses: actions/checkout@v4
      - uses: actions/checkout@v4
        with:
          repository: ${{inputs.tacos_gha_repo}}
          ref: ${{inputs.tacos_gha_ref}}
          path: tacos-gha

      - name: tell TF username and PR
        uses: ./tacos-gha/.github/actions/set-username-and-hostname

      - name: set workload identity provider
        id: set-workload-identity-provider
        run: |
          "$TACOS_GHA_HOME/"lib/ci/set-workload-identity-provider

      - name: set terraformer
        id: set-terraformer
        run: |
          "$TACOS_GHA_HOME/"lib/ci/set-terraformer

      - name: gcp auth
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{env.GETSENTRY_SAC_OIDC}}
          service_account: ${{env.SUDO_GCP_SERVICE_ACCOUNT}}

      - name: set gcloud identity
        run: |
          # TODO: upstream feature request on google-github-actions/auth -- this
          #   should be a default behavior
          gcloud config get account || : code $?
          gcloud config set account "$SUDO_GCP_SERVICE_ACCOUNT"

          # also: mask the access token (NOTE: use cat to avoid xtrace'ing the token)
          # TODO: ditto
          cat <<< "::add-mask::$(gcloud auth print-access-token)"

      # this should really be default behavior:
      - run: |
          gha-set-env 'TF_VERSION' cat .terraform-version
          gha-set-env 'TERRAGRUNT_VERSION' cat .terragrunt-version

      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v1.1.0
        with:
          terragrunt_version: ${{env.TERRAGRUNT_VERSION}}

      - run: |
          gha-set-env 'PYTHON_VERSION' grep -v '^#' "$TACOS_GHA_HOME/".python-version
      - uses: actions/setup-python@v5
        with:
          python-version: ${{env.PYTHON_VERSION}}

      - name: Obtain the lock
        id: lock
        run: |
          gha-log-as-step-summary "$TACOS_GHA_HOME/"lib/ci/obtain-lock

      - name: Save lock result
        run: echo "${{ env.TF_LOCK }}" > lock_result.txt
  
      - name: Prepare artifact name
        id: artifact_name
        run: echo "artifact_name=$(echo '${{ matrix.tf-root-module }}' | tr '/' '-')" >> $GITHUB_OUTPUT

      - name: Upload lock result
        uses: actions/upload-artifact@v4
        with:
          name: lock_result/${{ steps.artifact_name.outputs.artifact_name }}.json
          path: lock_result
          retention-days: 1

  comment_summary:
    needs: [tacos_lock]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
      - uses: actions/checkout@v4
        with:
          repository: ${{inputs.tacos_gha_repo}}
          ref: ${{inputs.tacos_gha_ref}}
          path: tacos-gha

      - name: Prepare summary
        uses: ./tacos-gha/.github/actions/prepare-summary
        with:
          artifact-path: lock_result
          process-file-command: ./tacos-gha/lib/ci/process-lock-result

      - name: Comment summary
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const summary = process.env.SUMMARY;
            const formattedSummary = summary.replace(/,/g, '\n');
            if (summary) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: formattedSummary
              });
            }
