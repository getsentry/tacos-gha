#!/usr/bin/env python3
from pathlib import Path
from typing import NewType

Device = NewType("Device", int)


class UserError(SystemExit):
    pass


class NotFoundError(UserError):
    def __init__(self, msg: object):
        super().__init__(f"Not found: {msg}")


class NotFoundTillRootError(NotFoundError):
    def __init__(self, msg: object):
        super().__init__(f"Searched all parent paths: {msg}")


class NotFoundSameDeviceError(NotFoundError):
    def __init__(self, msg: object):
        super().__init__(f"Searched up to mountpoint: {msg}")


def get_device_number(path: Path) -> Device:
    return Device(path.stat().st_dev)


def nearest_config_file(cwd: Path, relpath: Path) -> Path:
    fname = relpath.name
    curr_path = cwd / relpath.parent
    orig_device = get_device_number(cwd)
    while True:
        if get_device_number(curr_path) != orig_device:
            # we crossed a mountpoint
            raise NotFoundSameDeviceError(relpath)

        fpath = curr_path / fname
        if fpath.exists():
            return fpath

        next_path = curr_path.parent
        if curr_path.samefile(next_path):
            # we hit the filesystem root
            raise NotFoundTillRootError(relpath)
        else:
            curr_path = next_path


def main():
    from sys import argv

    relpath = Path(argv[1])
    print(nearest_config_file(Path.cwd(), relpath))


if __name__ == "__main__":
    exit(main())
