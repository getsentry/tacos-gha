#!/bin/bash
set -eEuo pipefail
HERE="$(dirname "$(readlink -f "$0")")"
. "$HERE/"lib/env.sh

root_module="${1:-"$PWD"}"
working_dir="$(tf_working_dir "$root_module")"

# at most 1 reiteration should be necessary
i=0
while (( i < 10 )); do
  (( i += 1 ))


  fancy_error="$(
    cd "$working_dir" || exit 1
    # swap stdout and stderr:
    terraform force-unlock -force -- -1 3>&2 2>&1 1>&3 <<< ""
  )" && status=$? || status=$?
  # strip ansi fanciness from error messages, for automated consumption
  error="$(
    uncolor <<< "$fancy_error" |
    sed -r 's/^│ //; /^[╷╵]$/d'
  )"

  if grep -Eq <<< "$error" $'ID:'; then
    "$HERE/"lib/error2json <<< "$error"
    exit 0
  elif grep -Eq <<< "$error" '^Failed to unlock state: LocalState not locked$'
    then
    echo >&2 "No remote tfstate configured, path: '$root_module'"
    exit 1
  elif grep -Eq <<< "$error" $'^\t\* storage: object doesn'\''t exist$'; then
    echo '{"lock": false}'
    exit 0
  elif grep -Eq <<< "$error" \
      'Error: .*(Backend initialization required, please run "terraform init"|Required plugins are not installed)'
    then
    ( # NB: need to undo the cd to keep relative paths valid
      cd "$working_dir"
      if ! noise="$(terraform init 2>&1)"; then
        echo >&2 Terraform init failed!
        echo >&2 "$noise"
        exit 1
      fi
    )
    continue
  else  # an unexpected error: show it
    set +x
    echo -n >&2 "$fancy_error"  # avoid the newline appended by <<<
    exit "$status"
  fi

done

echo >&2 AssertionError: this should be impossible: "$i"
exit 99
