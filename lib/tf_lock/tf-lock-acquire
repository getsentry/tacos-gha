#!/usr/bin/env python3
"""Acquire the terraform state lock and print its ID (an integer)"""

from __future__ import annotations

import sys
from os import environ

from lib.parse import Parse
from lib.sh import sh
from lib.tf_lock.lib import env
from lib.types import OSPath

HERE = sh.get_HERE(__file__)

try:
    root_module = sys.argv[1]
except IndexError:
    root_module = "."

lock_info = sh.json((HERE / "tf-lock-info", root_module))
assert isinstance(lock_info, dict), lock_info
lock = lock_info["lock"]

assert isinstance(lock, bool), lock

if lock:
    lock_user = lock_info["Who"]
    tf_user = sh.stdout(("whoami",)) + "@" + sh.stdout(("hostname", "-f"))

    if lock_user == tf_user:
        # already done!
        sh.info(f"tf-lock-acquire: success: {lock_user}")
        sh.info(f"{lock_info}")
        exit(0)
    else:
        sh.info(f"tf-lock-acquire: failure: not {lock_user}: {tf_user}")
        p = Parse(lock_user)
        pr_number = p.after.first("@").before.first(".")
        repo_name = p.after.first(".").before.last(".", ".", ".")
        org_name = p.after.first(repo_name, ".").before.last(".github")
        pr_link = f"https://github.com/{org_name}/{repo_name}/pull/{pr_number}"
        sh.info(f"The PR holding the lock: {pr_link}")
        exit(environ["TF_LOCK_EHELD"])

root_module_path = OSPath(root_module)
assert isinstance(root_module_path, OSPath), root_module_path
sh.cd(env.tf_working_dir(root_module_path))
sh.run(("f{HERE}/acquire.py",))

sh.run(("exec", sys.argv[0], sys.argv[1:]))  # start over
