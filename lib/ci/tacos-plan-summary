#!/usr/bin/env python3
from __future__ import annotations

from typing import Iterable
from typing import NamedTuple
from typing import Self

from lib.sh import sh
from lib.types import Generator
from lib.types import OSPath

ExitCode = None | str | int
Line = str


def get_file(path: OSPath) -> str:
    return path.read_text().strip()


def gha_summary_and_details(
    summary: str, details: Iterable[str], rollup: bool = True
) -> Generator[str]:
    if rollup:
        yield "<details>"
        yield f"  <summary>{summary}</summary>"
    else:
        yield f"  {summary}"

    yield ""
    yield from details
    yield ""

    if rollup:
        yield "  </details>"
        yield ""


class SliceSummary(NamedTuple):
    name: str
    path: OSPath
    tacos_verb: str
    explanation: str
    returncode: int

    @classmethod
    def from_matrix_fan_out(cls, path: OSPath) -> Self:
        # convert a bunch of files into something well-typed
        return cls(
            name=get_file(path / "env/TF_ROOT_MODULE"),
            path=path,
            tacos_verb=get_file(path / "tacos_verb"),
            explanation=get_file(path / "explanation"),
            returncode=int(get_file(path / "returncode")),
        )

    @classmethod
    def from_matrix_fan_in(cls, path: OSPath) -> Generator[Self]:
        for matrix in (path / "matrix.list").open():
            matrix = matrix.strip()

            yield cls.from_matrix_fan_out(path / matrix)

    # see lib/ci/bin/tf-step-summary:
    @property
    def tf_log(self) -> OSPath:
        return self.path / "tf-log.hcl"

    @property
    def console_log(self) -> OSPath:
        return self.path / "console.log"

    @property
    def dirty(self) -> bool:
        return self.returncode == 2

    @property
    def clean(self) -> bool:
        return self.returncode == 0

    @property
    def error(self) -> bool:
        return self.returncode not in (0, 2)

    def summarize_exit(self) -> str:
        if self.returncode == 0:
            return "success"
        else:
            return f"error code {self.returncode}"

    def summary(self) -> str:
        log = tuple(sh.lines(("uncolor", self.tf_log)))
        for line in reversed(log):
            for success in ("Apply complete", "Plan:", "No changes"):
                if success in line:
                    return line  # :D

        log = tuple(sh.lines(("uncolor", self.console_log)))
        for line in log:
            if "error" in line.lower():
                return line  # D:

        for line in reversed(log):
            lowered = line.lower()
            if "success" in lowered:
                return line  # :D
            elif "failure" in lowered:
                return line  # D:

        # we didn't find anything significant-looking at all
        return f"completed ({self.summarize_exit()})"

    def markdown(self, rollup: bool) -> Generator[Line]:
        yield f"### {self.name}"
        yield self.explanation
        yield ""

        yield from gha_summary_and_details(
            summary=self.summary(),
            details=self.markdown_details(),
            rollup=rollup,
        )

        yield f'<!-- getsentry/tacos-gha "{self.tacos_verb}({self.name})" -->'
        yield ""

    def markdown_details(self) -> Generator[str]:
        yield from gha_summary_and_details(
            summary=f"Commands: ({self.summarize_exit()})",
            details=(
                "",
                "```console",
                sh.stdout(("uncolor", self.console_log)).strip(),
                "```",
                "",
            ),
        )

        yield "  Result:"
        yield ""
        if tf_log := sh.stdout(("uncolor", self.tf_log)).strip():
            yield "```hcl"
            yield tf_log
            yield "```"
        else:
            yield "(no output)"
        yield ""

    def __str__(self) -> str:
        return self.name


def tacos_plan_summary(path: OSPath) -> Generator[Line]:
    slices = tuple(SliceSummary.from_matrix_fan_in(path))

    dirty = tuple(slice for slice in slices if slice.dirty)
    clean = tuple(slice for slice in slices if slice.clean)
    error = tuple(slice for slice in slices if slice.error)

    yield "# Terraform Plan"
    yield f"TACOS generated a terraform plan for {len(slices)} slices:"
    yield ""
    if error:
        yield f"  * {len(error)} failed to plan"
    if dirty:
        yield f"  * {len(dirty)} affected"
    if clean:
        yield f"  * {len(clean)} unaffected"

    first = False
    if error:
        yield "## Errors"
        yield ""
        for slice in error:
            yield from slice.markdown(rollup=not first)
            first = False

    if dirty:
        yield "## Changes"
        yield ""

        for slice in dirty:
            yield from slice.markdown(rollup=not first)
            first = False

    if clean:
        yield "## Clean"
        yield ""
        yield "These slices are in scope of your changes, but Terraform found"
        yield "no necessary changes."
        yield ""
        for slice in clean:
            yield f"  * {slice.name}"


def main() -> ExitCode:
    from sys import argv

    try:
        arg = argv[1]
    except IndexError:
        arg = "./matrix-fan-out"

    path = OSPath(arg)

    for line in tacos_plan_summary(path):
        print(line)

    return 0


if __name__ == "__main__":
    raise SystemExit(main())
