#!/usr/bin/env python3
from __future__ import annotations

import json
from pathlib import Path
from typing import TypeAlias

ExitCode = None | str | int
StrBag: TypeAlias = "dict[str, str | StrBag]"


def retrieve_matrix_data(matrix: Path) -> StrBag:
    print("---")
    print("MATRIX:", matrix)
    result: StrBag = {}
    env = result["env"] = {}
    for path in matrix.glob("outputs/**/*"):
        if not path.is_file():
            continue

        relpath = path.relative_to(matrix)
        print(" ", relpath)

        dest = result
        for part in relpath.parent.parts:
            for part in part.split("."):
                tmp = dest.get(part)
                if tmp is None:
                    dest = dest[part] = {}
                else:
                    assert isinstance(tmp, dict)
                    dest = tmp

        if path.name.startswith("env."):
            var = path.name.replace("env.", "", 1)
            env[var] = path.read_text()
        elif path.name.endswith(".json"):
            var = path.with_suffix("").name
            env[var] = json.load(path.open())
        else:
            env[path.name] = path.read_text()

        print("  ", path.name)
    return result


def tacos_plan_summary(path: Path) -> ExitCode:
    for path in path.glob("*"):
        retrieve_matrix_data(path)

    return 0


def main() -> ExitCode:
    from sys import argv

    try:
        arg = argv[1]
    except IndexError:
        arg = "."

    path = Path(arg)

    return tacos_plan_summary(path)


if __name__ == "__main__":
    raise SystemExit(main())
