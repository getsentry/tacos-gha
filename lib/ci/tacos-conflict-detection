#!/usr/bin/env python3.12
from __future__ import annotations

from lib import wait
from lib.sh import sh
from lib.types import URL
from lib.user_error import UserError

TAG = '<!-- getsentry/tacos-gha "conflict-detection" -->'
MERGE_CONFLICT_MESSAGE = f"""\
You currently have a merge conflict, which prevents github-actions from running
any checks. TACOS will resume doing terraform stuff for you once the conflict is
resolved.
{TAG}
"""

# mypy can't find LessThanOneError
# mypy: ignore-errors


def pr_conflict_status(pr_url: URL) -> str:
    return sh.line(
        (
            "gh",
            "pr",
            "view",
            pr_url,
            "--json=mergeStateStatus",
            "--jq=.mergeStateStatus",
        )
    )


def tell_user(pr_url: URL) -> None:
    sh.run(("gh", "issue", "edit", "--add-label", ":taco::conflict", pr_url))
    sh.run(
        ("gh", "issue", "comment", pr_url, "--body-file", "-"),
        input=MERGE_CONFLICT_MESSAGE,
    )


def find_conflict_message(pr_url: URL) -> str | None:
    try:
        return sh.line(
            (
                "gh",
                "pr",
                "view",
                pr_url,
                "--json",
                "comments",
                '--jq=.comments[] | select(.body | contains("<!-- getsentry/tacos-gha "conflict-detection" -->")) | .id',
            )
        )
    except sh.LessThanOneError:
        return None


def get_owner_repo(pr_url: str) -> tuple[str, str]:
    # https://github.com/getsentry/tacos-gha.demo/pull/1635
    netloc, owner, repo, pull_endpoint, pull = pr_url.rsplit("/", 4)

    assert netloc == "https://github.com", netloc
    assert pull_endpoint == "pull", pull_endpoint
    assert pull.isdigit(), pull

    return owner, repo


def delete_message(pr_url: str, comment_id: str) -> None:
    owner, repo = get_owner_repo(pr_url)

    # https://docs.github.com/en/rest/issues/comments#delete-an-issue-comment
    endpoint = f"/repos/{owner}/{repo}/issues/comments/{comment_id}"

    sh.run(("gh", "api", "-X", "DELETE", endpoint))


def tacos_conflict_detection(pr_url: URL) -> None:
    def pr_conflict_status_known() -> str | None:
        status = pr_conflict_status(pr_url)
        if status == "UNKNOWN":
            return None  # keep waiting
        else:
            return status

    status = wait.for_(pr_conflict_status_known)
    prior_message = find_conflict_message(pr_url)

    if status == "DIRTY" and prior_message is None:
        tell_user(pr_url)
    elif prior_message:
        delete_message(pr_url, prior_message)


@UserError.handler
def main() -> None:
    from sys import argv

    tacos_conflict_detection(URL(argv[1]))


if __name__ == "__main__":
    raise SystemExit(main())
